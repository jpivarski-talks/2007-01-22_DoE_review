%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Matthew Herndon
%%Title: Window .0.c
%%CreationDate: Thu Mar 11 16:44:32 2004
%%BoundingBox: 0 618 411 793
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Italic
%%+ font Symbol
%%EndComments

%%BeginProlog
50 dict begin

% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: tkCanvPs.c,v 1.7 2000/04/25 01:03:06 hobbs Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def

% Define the array ISOLatin1Encoding (which specifies how characters are
% encoded for ISO-8859-1 fonts), if it isn't already present (Postscript
% level 2 is supposed to define it, but level 1 doesn't).

systemdict /ISOLatin1Encoding known not {
    /ISOLatin1Encoding [
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /exclam /quotedbl /numbersign /dollar /percent /ampersand
	    /quoteright
	/parenleft /parenright /asterisk /plus /comma /minus /period /slash
	/zero /one /two /three /four /five /six /seven
	/eight /nine /colon /semicolon /less /equal /greater /question
	/at /A /B /C /D /E /F /G
	/H /I /J /K /L /M /N /O
	/P /Q /R /S /T /U /V /W
	/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
	/quoteleft /a /b /c /d /e /f /g
	/h /i /j /k /l /m /n /o
	/p /q /r /s /t /u /v /w
	/x /y /z /braceleft /bar /braceright /asciitilde /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/dotlessi /grave /acute /circumflex /tilde /macron /breve /dotaccent
	/dieresis /space /ring /cedilla /space /hungarumlaut /ogonek /caron
	/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
	/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen
	    /registered /macron
	/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
	    /periodcentered
	/cedillar /onesuperior /ordmasculine /guillemotright /onequarter
	    /onehalf /threequarters /questiondown
	/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
	/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex
	    /Idieresis
	/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
	/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
	    /germandbls
	/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
	/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex
	    /idieresis
	/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
	/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn
	    /ydieresis
    ] def
} if

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to ISOLatin1.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding ISOLatin1Encoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	stringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup stringwidth pop
	justify neg mul 0 moveto
	stipple {

	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		char 0 3 -1 roll put
		currentpoint
		gsave
		char true charpath clip StippleText
		grestore
		char stringwidth translate
		moveto
	    } forall
	    grestore
	} {show} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Italic
%%IncludeResource: font Symbol
%%EndSetup

%%Page: 1 1
save
0.0 792.0 translate
0.8575 0.8575 scale
0 -202 translate
0 202 moveto 479 202 lineto 479 0 lineto 0 0 lineto closepath clip newpath
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
220 98 [
(-)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
202 82 [
(W)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
388 92 [
(-)
] 26 -0 0 0 false DrawText
grestore
gsave
/Symbol findfont 21 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
378 83 [
(m)
] 25 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
383 172 [
(+)
] 26 -0 0 0 false DrawText
grestore
gsave
/Symbol findfont 21 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
376 163 [
(m)
] 25 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
217 172 [
(+)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
201 159 [
(W)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
45 80 [
(s)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
43 158 [
(b)
] 26 -0 0 0 false DrawText
grestore
gsave
273 138 moveto
273 97.6002800439912 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
273 92 moveto
278.001 104.001 lineto
274 100.800840031994 lineto
272 100.800840031994 lineto
267.999 104.001 lineto
273 92 lineto
fill
grestore
gsave
273 98 moveto
273 57 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
168 55 moveto
168 96.3997199560088 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
168 102 moveto
162.999 89.999 lineto
167 93.1991599680064 lineto
169 93.1991599680064 lineto
173.001 89.999 lineto
168 102 lineto
fill
grestore
gsave
168 96 moveto
168 137 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
272 58 moveto
333.399719956009 58 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
339 58 moveto
326.999 63.001 lineto
330.199159968006 59 lineto
330.199159968006 57 lineto
326.999 52.999 lineto
339 58 lineto
fill
grestore
gsave
333 58 moveto
395 58 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
46 56 moveto
107.399719956009 56 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
113 56 moveto
100.999 61.001 lineto
104.199159968006 57 lineto
104.199159968006 55 lineto
100.999 50.999 lineto
113 56 lineto
fill
grestore
gsave
107 56 moveto
169 56 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
167 137 moveto
104.600280043991 137 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
99 137 moveto
111.001 131.999 lineto
107.800840031994 136 lineto
107.800840031994 138 lineto
111.001 142.001 lineto
99 137 lineto
fill
grestore
gsave
105 137 moveto
44 137 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
396 137 moveto
333.600280043991 137 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
328 137 moveto
340.001 131.999 lineto
336.800840031994 136 lineto
336.800840031994 138 lineto
340.001 142.001 lineto
328 137 lineto
fill
grestore
gsave
334 137 moveto
273 137 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
166 138 moveto
170.418875 133.998 173.7280625 132.999 175.9375 135 curveto
178.1469375 137.001 180.3530625 138.999 182.5625 141 curveto
184.7719375 143.001 186.9780625 143.001 189.1875 141 curveto
191.3969375 138.999 193.6030625 137.001 195.8125 135 curveto
198.0219375 132.999 200.2280625 132.999 202.4375 135 curveto
204.6469375 137.001 206.8530625 138.999 209.0625 141 curveto
211.2719375 143.001 213.4780625 143.001 215.6875 141 curveto
217.8969375 138.999 220.1030625 137.001 222.3125 135 curveto
224.5219375 132.999 226.7280625 132.999 228.9375 135 curveto
231.1469375 137.001 233.3530625 138.999 235.5625 141 curveto
237.7719375 143.001 239.9780625 143.001 242.1875 141 curveto
244.3969375 138.999 246.6030625 137.001 248.8125 135 curveto
251.0219375 132.999 253.2280625 132.999 255.4375 135 curveto
257.6469375 137.001 259.8530625 138.999 262.0625 141 curveto
264.2719375 143.001 267.581125 142.002 272 138 curveto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
167 59 moveto
171.418875 54.998 174.7280625 53.999 176.9375 56 curveto
179.1469375 58.001 181.3530625 59.999 183.5625 62 curveto
185.7719375 64.001 187.9780625 64.001 190.1875 62 curveto
192.3969375 59.999 194.6030625 58.001 196.8125 56 curveto
199.0219375 53.999 201.2280625 53.999 203.4375 56 curveto
205.6469375 58.001 207.8530625 59.999 210.0625 62 curveto
212.2719375 64.001 214.4780625 64.001 216.6875 62 curveto
218.8969375 59.999 221.1030625 58.001 223.3125 56 curveto
225.5219375 53.999 227.7280625 53.999 229.9375 56 curveto
232.1469375 58.001 234.3530625 59.999 236.5625 62 curveto
238.7719375 64.001 240.9780625 64.001 243.1875 62 curveto
245.3969375 59.999 247.6030625 58.001 249.8125 56 curveto
252.0219375 53.999 254.2280625 53.999 256.4375 56 curveto
258.6469375 58.001 260.8530625 59.999 263.0625 62 curveto
265.2719375 64.001 268.581125 63.002 273 59 curveto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
146 111 [
(t)
] 26 -0 0 0 false DrawText
grestore
gsave
/Symbol findfont 21 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
288 109 [
(u)
] 25 -0 0 0 false DrawText
grestore
gsave
/Times-Italic findfont 15 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
302 96 [
(l)
] 19 -0 0 0 false DrawText
grestore
restore showpage

%%Trailer
end
%%EOF
