%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Matthew Herndon
%%Title: Window .0.c
%%CreationDate: Thu Mar 11 16:34:21 2004
%%BoundingBox: 0 606 418 793
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Italic
%%+ font Symbol
%%EndComments

%%BeginProlog
50 dict begin

% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: tkCanvPs.c,v 1.7 2000/04/25 01:03:06 hobbs Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def

% Define the array ISOLatin1Encoding (which specifies how characters are
% encoded for ISO-8859-1 fonts), if it isn't already present (Postscript
% level 2 is supposed to define it, but level 1 doesn't).

systemdict /ISOLatin1Encoding known not {
    /ISOLatin1Encoding [
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /exclam /quotedbl /numbersign /dollar /percent /ampersand
	    /quoteright
	/parenleft /parenright /asterisk /plus /comma /minus /period /slash
	/zero /one /two /three /four /five /six /seven
	/eight /nine /colon /semicolon /less /equal /greater /question
	/at /A /B /C /D /E /F /G
	/H /I /J /K /L /M /N /O
	/P /Q /R /S /T /U /V /W
	/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
	/quoteleft /a /b /c /d /e /f /g
	/h /i /j /k /l /m /n /o
	/p /q /r /s /t /u /v /w
	/x /y /z /braceleft /bar /braceright /asciitilde /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/dotlessi /grave /acute /circumflex /tilde /macron /breve /dotaccent
	/dieresis /space /ring /cedilla /space /hungarumlaut /ogonek /caron
	/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
	/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen
	    /registered /macron
	/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
	    /periodcentered
	/cedillar /onesuperior /ordmasculine /guillemotright /onequarter
	    /onehalf /threequarters /questiondown
	/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
	/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex
	    /Idieresis
	/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
	/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
	    /germandbls
	/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
	/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex
	    /idieresis
	/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
	/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn
	    /ydieresis
    ] def
} if

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to ISOLatin1.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding ISOLatin1Encoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	stringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup stringwidth pop
	justify neg mul 0 moveto
	stipple {

	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		char 0 3 -1 roll put
		currentpoint
		gsave
		char true charpath clip StippleText
		grestore
		char stringwidth translate
		moveto
	    } forall
	    grestore
	} {show} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Times-Roman
%%IncludeResource: font Times-Italic
%%IncludeResource: font Symbol
%%EndSetup

%%Page: 1 1
save
0.0 792.0 translate
0.8575 0.8575 scale
0 -216 translate
0 216 moveto 487 216 lineto 487 0 lineto 0 0 lineto closepath clip newpath
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
390 109 [
(-)
] 26 -0 0 0 false DrawText
grestore
gsave
/Symbol findfont 21 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
379 100 [
(m)
] 25 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
387 187 [
(+)
] 26 -0 0 0 false DrawText
grestore
gsave
/Symbol findfont 21 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
378 179 [
(m)
] 25 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
226 114 [
(-)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
205 99 [
(W)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
222 190 [
(+)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
207 175 [
(H)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
45 98 [
(s)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
44 178 [
(b)
] 26 -0 0 0 false DrawText
grestore
gsave
273 112 moveto
273 71 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
273 152 moveto
273 111.600280043991 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
273 106 moveto
278.001 118.001 lineto
274 114.800840031994 lineto
272 114.800840031994 lineto
267.999 118.001 lineto
273 106 lineto
fill
grestore
gsave
259.555555556 151 moveto
271 151 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
236.666666667 151 moveto
248.111111111 151 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
213.777777778 151 moveto
225.222222222 151 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
190.888888889 151 moveto
202.333333333 151 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
168 151 moveto
179.444444444 151 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
1.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
333 72 moveto
395 72 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
272 72 moveto
333.399719956009 72 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
339 72 moveto
326.999 77.001 lineto
330.199159968006 73 lineto
330.199159968006 71 lineto
326.999 66.999 lineto
339 72 lineto
fill
grestore
gsave
167 113 moveto
167 151 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
167 74 moveto
167 113.399719956009 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
167 119 moveto
161.999 106.999 lineto
166 110.199159968006 lineto
168 110.199159968006 lineto
172.001 106.999 lineto
167 119 lineto
fill
grestore
gsave
167 73 moveto
171.418875 68.998 174.7280625 67.999 176.9375 70 curveto
179.1469375 72.001 181.3530625 73.999 183.5625 76 curveto
185.7719375 78.001 187.9780625 78.001 190.1875 76 curveto
192.3969375 73.999 194.6030625 72.001 196.8125 70 curveto
199.0219375 67.999 201.2280625 67.999 203.4375 70 curveto
205.6469375 72.001 207.8530625 73.999 210.0625 76 curveto
212.2719375 78.001 214.4780625 78.001 216.6875 76 curveto
218.8969375 73.999 221.1030625 72.001 223.3125 70 curveto
225.5219375 67.999 227.7280625 67.999 229.9375 70 curveto
232.1469375 72.001 234.3530625 73.999 236.5625 76 curveto
238.7719375 78.001 240.9780625 78.001 243.1875 76 curveto
245.3969375 73.999 247.6030625 72.001 249.8125 70 curveto
252.0219375 67.999 254.2280625 67.999 256.4375 70 curveto
258.6469375 72.001 260.8530625 73.999 263.0625 76 curveto
265.2719375 78.001 268.581125 77.002 273 73 curveto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
396 151 moveto
333.600280043991 151 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
328 151 moveto
340.001 145.999 lineto
336.800840031994 150 lineto
336.800840031994 152 lineto
340.001 156.001 lineto
328 151 lineto
fill
grestore
gsave
334 151 moveto
273 151 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
44 73 moveto
105.399719956009 73 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
111 73 moveto
98.999 78.001 lineto
102.199159968006 74 lineto
102.199159968006 72 lineto
98.999 67.999 lineto
111 73 lineto
fill
grestore
gsave
105 73 moveto
167 73 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
169 151 moveto
106.600280043991 151 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
101 151 moveto
113.001 145.999 lineto
109.800840031994 150 lineto
109.800840031994 152 lineto
113.001 156.001 lineto
101 151 lineto
fill
grestore
gsave
107 151 moveto
46 151 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
146 125 [
(t)
] 26 -0 0 0 false DrawText
grestore
gsave
/Symbol findfont 21 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
288 123 [
(u)
] 25 -0 0 0 false DrawText
grestore
gsave
/Times-Italic findfont 15 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
302 110 [
(l)
] 19 -0 0 0 false DrawText
grestore
restore showpage

%%Trailer
end
%%EOF
