%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Tk Canvas Widget
%%For: Matthew Herndon
%%Title: Window .0.c
%%CreationDate: Thu Mar 11 16:46:11 2004
%%BoundingBox: 0 624 403 793
%%Pages: 1
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%DocumentNeededResources: font Times-Roman
%%+ font Symbol
%%EndComments

%%BeginProlog
50 dict begin

% This is a standard prolog for Postscript generated by Tk's canvas
% widget.
% RCS: @(#) $Id: tkCanvPs.c,v 1.7 2000/04/25 01:03:06 hobbs Exp $

% The definitions below just define all of the variables used in
% any of the procedures here.  This is needed for obscure reasons
% explained on p. 716 of the Postscript manual (Section H.2.7,
% "Initializing Variables," in the section on Encapsulated Postscript).

/baseline 0 def
/stipimage 0 def
/height 0 def
/justify 0 def
/lineLength 0 def
/spacing 0 def
/stipple 0 def
/strings 0 def
/xoffset 0 def
/yoffset 0 def
/tmpstip null def

% Define the array ISOLatin1Encoding (which specifies how characters are
% encoded for ISO-8859-1 fonts), if it isn't already present (Postscript
% level 2 is supposed to define it, but level 1 doesn't).

systemdict /ISOLatin1Encoding known not {
    /ISOLatin1Encoding [
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/space /exclam /quotedbl /numbersign /dollar /percent /ampersand
	    /quoteright
	/parenleft /parenright /asterisk /plus /comma /minus /period /slash
	/zero /one /two /three /four /five /six /seven
	/eight /nine /colon /semicolon /less /equal /greater /question
	/at /A /B /C /D /E /F /G
	/H /I /J /K /L /M /N /O
	/P /Q /R /S /T /U /V /W
	/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
	/quoteleft /a /b /c /d /e /f /g
	/h /i /j /k /l /m /n /o
	/p /q /r /s /t /u /v /w
	/x /y /z /braceleft /bar /braceright /asciitilde /space
	/space /space /space /space /space /space /space /space
	/space /space /space /space /space /space /space /space
	/dotlessi /grave /acute /circumflex /tilde /macron /breve /dotaccent
	/dieresis /space /ring /cedilla /space /hungarumlaut /ogonek /caron
	/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
	/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen
	    /registered /macron
	/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
	    /periodcentered
	/cedillar /onesuperior /ordmasculine /guillemotright /onequarter
	    /onehalf /threequarters /questiondown
	/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
	/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex
	    /Idieresis
	/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
	/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
	    /germandbls
	/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
	/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex
	    /idieresis
	/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
	/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn
	    /ydieresis
    ] def
} if

% font ISOEncode font
% This procedure changes the encoding of a font from the default
% Postscript encoding to ISOLatin1.  It's typically invoked just
% before invoking "setfont".  The body of this procedure comes from
% Section 5.6.1 of the Postscript book.

/ISOEncode {
    dup length dict begin
	{1 index /FID ne {def} {pop pop} ifelse} forall
	/Encoding ISOLatin1Encoding def
	currentdict
    end

    % I'm not sure why it's necessary to use "definefont" on this new
    % font, but it seems to be important; just use the name "Temporary"
    % for the font.

    /Temporary exch definefont
} bind def

% StrokeClip
%
% This procedure converts the current path into a clip area under
% the assumption of stroking.  It's a bit tricky because some Postscript
% interpreters get errors during strokepath for dashed lines.  If
% this happens then turn off dashes and try again.

/StrokeClip {
    {strokepath} stopped {
	(This Postscript printer gets limitcheck overflows when) =
	(stippling dashed lines;  lines will be printed solid instead.) =
	[] 0 setdash strokepath} if
    clip
} bind def

% desiredSize EvenPixels closestSize
%
% The procedure below is used for stippling.  Given the optimal size
% of a dot in a stipple pattern in the current user coordinate system,
% compute the closest size that is an exact multiple of the device's
% pixel size.  This allows stipple patterns to be displayed without
% aliasing effects.

/EvenPixels {
    % Compute exact number of device pixels per stipple dot.
    dup 0 matrix currentmatrix dtransform
    dup mul exch dup mul add sqrt

    % Round to an integer, make sure the number is at least 1, and compute
    % user coord distance corresponding to this.
    dup round dup 1 lt {pop 1} if
    exch div mul
} bind def

% width height string StippleFill --
%
% Given a path already set up and a clipping region generated from
% it, this procedure will fill the clipping region with a stipple
% pattern.  "String" contains a proper image description of the
% stipple pattern and "width" and "height" give its dimensions.  Each
% stipple dot is assumed to be about one unit across in the current
% user coordinate system.  This procedure trashes the graphics state.

/StippleFill {
    % The following code is needed to work around a NeWSprint bug.

    /tmpstip 1 index def

    % Change the scaling so that one user unit in user coordinates
    % corresponds to the size of one stipple dot.
    1 EvenPixels dup scale

    % Compute the bounding box occupied by the path (which is now
    % the clipping region), and round the lower coordinates down
    % to the nearest starting point for the stipple pattern.  Be
    % careful about negative numbers, since the rounding works
    % differently on them.

    pathbbox
    4 2 roll
    5 index div dup 0 lt {1 sub} if cvi 5 index mul 4 1 roll
    6 index div dup 0 lt {1 sub} if cvi 6 index mul 3 2 roll

    % Stack now: width height string y1 y2 x1 x2
    % Below is a doubly-nested for loop to iterate across this area
    % in units of the stipple pattern size, going up columns then
    % across rows, blasting out a stipple-pattern-sized rectangle at
    % each position

    6 index exch {
	2 index 5 index 3 index {
	    % Stack now: width height string y1 y2 x y

	    gsave
	    1 index exch translate
	    5 index 5 index true matrix tmpstip imagemask
	    grestore
	} for
	pop
    } for
    pop pop pop pop pop
} bind def

% -- AdjustColor --
% Given a color value already set for output by the caller, adjusts
% that value to a grayscale or mono value if requested by the CL
% variable.

/AdjustColor {
    CL 2 lt {
	currentgray
	CL 0 eq {
	    .5 lt {0} {1} ifelse
	} if
	setgray
    } if
} bind def

% x y strings spacing xoffset yoffset justify stipple DrawText --
% This procedure does all of the real work of drawing text.  The
% color and font must already have been set by the caller, and the
% following arguments must be on the stack:
%
% x, y -	Coordinates at which to draw text.
% strings -	An array of strings, one for each line of the text item,
%		in order from top to bottom.
% spacing -	Spacing between lines.
% xoffset -	Horizontal offset for text bbox relative to x and y: 0 for
%		nw/w/sw anchor, -0.5 for n/center/s, and -1.0 for ne/e/se.
% yoffset -	Vertical offset for text bbox relative to x and y: 0 for
%		nw/n/ne anchor, +0.5 for w/center/e, and +1.0 for sw/s/se.
% justify -	0 for left justification, 0.5 for center, 1 for right justify.
% stipple -	Boolean value indicating whether or not text is to be
%		drawn in stippled fashion.  If text is stippled,
%		procedure StippleText must have been defined to call
%		StippleFill in the right way.
%
% Also, when this procedure is invoked, the color and font must already
% have been set for the text.

/DrawText {
    /stipple exch def
    /justify exch def
    /yoffset exch def
    /xoffset exch def
    /spacing exch def
    /strings exch def

    % First scan through all of the text to find the widest line.

    /lineLength 0 def
    strings {
	stringwidth pop
	dup lineLength gt {/lineLength exch def} {pop} ifelse
	newpath
    } forall

    % Compute the baseline offset and the actual font height.

    0 0 moveto (TXygqPZ) false charpath
    pathbbox dup /baseline exch def
    exch pop exch sub /height exch def pop
    newpath

    % Translate coordinates first so that the origin is at the upper-left
    % corner of the text's bounding box. Remember that x and y for
    % positioning are still on the stack.

    translate
    lineLength xoffset mul
    strings length 1 sub spacing mul height add yoffset mul translate

    % Now use the baseline and justification information to translate so
    % that the origin is at the baseline and positioning point for the
    % first line of text.

    justify lineLength mul baseline neg translate

    % Iterate over each of the lines to output it.  For each line,
    % compute its width again so it can be properly justified, then
    % display it.

    strings {
	dup stringwidth pop
	justify neg mul 0 moveto
	stipple {

	    % The text is stippled, so turn it into a path and print
	    % by calling StippledText, which in turn calls StippleFill.
	    % Unfortunately, many Postscript interpreters will get
	    % overflow errors if we try to do the whole string at
	    % once, so do it a character at a time.

	    gsave
	    /char (X) def
	    {
		char 0 3 -1 roll put
		currentpoint
		gsave
		char true charpath clip StippleText
		grestore
		char stringwidth translate
		moveto
	    } forall
	    grestore
	} {show} ifelse
	0 spacing neg translate
    } forall
} bind def

%%EndProlog
%%BeginSetup
/CL 2 def
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%EndSetup

%%Page: 1 1
save
0.0 792.0 translate
0.8575 0.8575 scale
0 -195 translate
0 195 moveto 469 195 lineto 469 0 lineto 0 0 lineto closepath clip newpath
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
219 79 [
(-)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
199 64 [
(W)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
367 99 [
(-)
] 26 -0 0 0 false DrawText
grestore
gsave
/Symbol findfont 21 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
358 87 [
(m)
] 25 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
363 163 [
(+)
] 26 -0 0 0 false DrawText
grestore
gsave
/Symbol findfont 21 scalefont setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
355 152 [
(m)
] 25 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
259 110 [
(Z)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
213 142 [
(+)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
195 126 [
(W)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
46 76 [
(s)
] 26 -0 0 0 false DrawText
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
45 151 [
(b)
] 26 -0 0 0 false DrawText
grestore
gsave
300 87 moveto
336.365268712273 70.8376583504905 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
341.482869292 68.563169204 moveto
332.547315365657 78.0072084896774 lineto
333.846698499218 73.0513404231276 lineto
333.034421567128 71.2237173258798 lineto
328.485118428272 68.8672653803412 lineto
341.482869292 68.563169204 lineto
fill
grestore
gsave
336 71 moveto
372 55 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
169 53 moveto
169 92.3997199560088 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
169 98 moveto
163.999 85.999 lineto
168 89.1991599680064 lineto
170 89.1991599680064 lineto
174.001 85.999 lineto
169 98 lineto
fill
grestore
gsave
169 92 moveto
169 130 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
46 53 moveto
107.399719956009 53 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
113 53 moveto
100.999 58.001 lineto
104.199159968006 54 lineto
104.199159968006 52 lineto
100.999 47.999 lineto
113 53 lineto
fill
grestore
gsave
107 53 moveto
169 53 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
170 129 moveto
107.600280043991 129 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
102 129 moveto
114.001 123.999 lineto
110.800840031994 128 lineto
110.800840031994 130 lineto
114.001 134.001 lineto
102 129 lineto
fill
grestore
gsave
108 129 moveto
47 129 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
370 133 moveto
334.665951842616 109.780482639282 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
329.985767122 106.70493268 moveto
342.761507195079 109.116253393869 lineto
337.88985524936 110.702453929933 lineto
336.791499476034 112.373864889332 lineto
337.268629972672 117.474979601825 lineto
329.985767122 106.70493268 lineto
fill
grestore
gsave
335 110 moveto
300 87 lineto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 1.000 setrgbcolor AdjustColor
stroke
grestore
gsave
169 130 moveto
170.890885723043 123.885269400686 173.427498426022 120.960278628893 176.6174555645 121.21624392855 curveto
179.807412702979 121.472209228207 182.992587297022 121.727790771793 186.1825444355 121.98375607145 curveto
189.372501573979 122.239721371107 191.437101573979 120.841121371107 192.3825444355 117.78375607145 curveto
193.327987297022 114.726390771793 194.272012702979 111.673609228207 195.2174555645 108.61624392855 curveto
196.162898426022 105.558878628893 198.227498426021 104.160278628893 201.4174555645 104.41624392855 curveto
204.607412702979 104.672209228207 207.792587297021 104.927790771793 210.9825444355 105.18375607145 curveto
214.172501573979 105.439721371107 216.237101573979 104.041121371107 217.1825444355 100.98375607145 curveto
218.127987297022 97.9263907717928 219.072012702978 94.8736092281905 220.0174555645 91.8162439285 curveto
220.962898426021 88.7588786288095 224.620085723043 87.488069400619 231 88 curveto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
169 52 moveto
175.061012013511 50.969513311482 178.571993273255 51.911077878741 179.5434872665 54.827521223 curveto
180.514981259745 57.743964567259 181.485018740255 60.656035432741 182.4565127335 63.572478777 curveto
183.428006726745 66.488922121259 185.426006726745 67.687722121259 188.4565127335 67.172478777 curveto
191.487018740256 66.657235432741 194.512981259745 66.142764567259 197.5434872665 65.627521223 curveto
200.573993273255 65.112277878741 202.571993273256 66.311077878741 203.5434872665 69.227521223 curveto
204.514981259745 72.143964567259 205.485018740256 75.056035432741 206.4565127335 77.972478777 curveto
207.428006726745 80.888922121259 209.426006726745 82.087722121259 212.4565127335 81.572478777 curveto
215.487018740256 81.057235432741 218.512981259745 80.542764567259 221.5434872665 80.027521223 curveto
224.573993273255 79.512277878741 227.057012013511 82.167113311482 229 88 curveto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
231 88 moveto
235.6023 83.998 239.04885 82.999 241.35 85 curveto
243.65115 87.001 245.94885 88.999 248.25 91 curveto
250.55115 93.001 252.84885 93.001 255.15 91 curveto
257.45115 88.999 259.74885 87.001 262.05 85 curveto
264.35115 82.999 266.64885 82.999 268.95 85 curveto
271.25115 87.001 273.54885 88.999 275.85 91 curveto
278.15115 93.001 280.44885 93.001 282.75 91 curveto
285.05115 88.999 287.34885 87.001 289.65 85 curveto
291.95115 82.999 295.3977 83.998 300 88 curveto
0 setlinecap
1 setlinejoin
2 setlinewidth
[] 0 setdash
0.000 0.000 0.000 setrgbcolor AdjustColor
stroke
grestore
gsave
/Times-Roman findfont 21 scalefont ISOEncode setfont
0.000 0.000 0.000 setrgbcolor AdjustColor
146 104 [
(t)
] 26 -0 0 0 false DrawText
grestore
restore showpage

%%Trailer
end
%%EOF
